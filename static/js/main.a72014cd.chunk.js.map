{"version":3,"sources":["PplCard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","maxWidth","media","height","PplCard","email","firstname","lastname","avatar","classes","Card","className","CardActionArea","CardMedia","image","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","href","size","App","useState","users","setUsers","useEffect","a","fetch","then","res","json","data","catch","err","console","log","fetchData","Grid","container","spacing","style","padding","map","key","id","item","xs","sm","md","lg","xl","first_name","last_name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uXAaMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,OAAQ,OAKG,SAASC,EAAT,GAAwD,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,OACrDC,EAAUX,IAEhB,OACE,kBAACY,EAAA,EAAD,CAAMC,UAAWF,EAAQT,MACvB,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEF,UAAWF,EAAQP,MACnBY,MAAON,IAET,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC7Cb,EAAY,IAAMC,GAErB,kBAACS,EAAA,EAAD,CAAYE,QAAQ,QAAQE,MAAM,gBAAgBD,UAAU,KACzDd,KAIP,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAMf,EAAQgB,KAAK,QAAQJ,MAAM,WAAzC,mBCcOK,MAnDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAuBb,OAnBAC,qBAAU,WAAI,4CACZ,sBAAAC,EAAA,kEACIF,EADJ,SAEQG,MAAM,sCACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIA,EAAIE,QAChBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAK,cALrC,8EADY,uBAAC,WAAD,wBASZG,KAED,IASC,yBAAK7B,UAAU,OACX,8DACA,kBAAC8B,EAAA,EAAD,CACAC,WAAS,EACTC,QAAS,GACTC,MAAO,CAACC,QAAS,SAEhBlB,EAAMmB,KAAK,SAAAnB,GAAK,OACf,kBAACc,EAAA,EAAD,CACAM,IAAKpB,EAAMqB,GACXC,MAAI,EACJC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAEjC,kBAAClD,EAAD,CACA2C,IAAKpB,EAAMqB,GACX3C,MAAOsB,EAAMtB,MACbC,UAAWqB,EAAM4B,WACjBhD,SAAUoB,EAAM6B,UAChBhD,OAAQmB,EAAMnB,gBCpCJiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.a72014cd.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n// import material ui smaller components to create card component\n\n// makeStyles for material ui\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\n// customize the media card from material ui to suit our user cards.\nexport default function PplCard({email, firstname, lastname, avatar}) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={avatar}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {firstname + \" \" + lastname}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {email}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button href={avatar} size=\"small\" color=\"primary\">\n          Thumbnail Pic\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}","import React, {useState, useEffect} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\nimport PplCard from './PplCard';\n\n// setting your users initial state with React Hook\nfunction App() {\n  const [users, setUsers] = useState([])\n\n//setting up our async await fetch and turing response to json\n  useEffect(()=>{\n    async function fetchData() {\n        setUsers(\n      await fetch('https://reqres.in/api/users?page=2')\n          .then(res => res.json())\n          .then(res => res.data)\n          .catch(err => console.log(err, 'warning'))\n        )\n    }\n    fetchData();\n  } \n  ,[])\n\n  //setting up our nested grids from material ui\n  //outer grid is the container, the inner grid sets up the items\n  \n  //we iterate through the inner grid into the ppl card to gain control  \n  //PplCard propogated with API data. \n  \n  return (\n    <div className=\"App\">\n        <h3>THE TRUE BEAUTY OF MATERIAL UI</h3>\n        <Grid\n        container\n        spacing={10}\n        style={{padding: '24px'}}\n        >\n        {users.map( users =>  \n          <Grid\n          key={users.id}\n          item\n          xs={12} sm={6} md={4} lg={4} xl={3}\n        >\n          <PplCard\n          key={users.id}\n          email={users.email}\n          firstname={users.first_name}\n          lastname={users.last_name}\n          avatar={users.avatar}\n          />\n        </Grid>\n        )}\n        </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}